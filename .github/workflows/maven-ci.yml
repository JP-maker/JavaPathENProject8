# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: Java CI with Maven

# Déclencheurs : quand exécuter ce workflow ?
on:
  # Exécuter sur chaque push vers la branche 'main' ou 'master'
  push:
    branches: [ "main", "master" ]
  # Exécuter sur chaque Pull Request ciblant la branche 'main' ou 'master'
  pull_request:
    branches: [ "main", "master" ]

# Définition des "jobs" (tâches) à exécuter
jobs:
  # Nom du job (peut être ce que vous voulez)
  build-and-test:
    # Machine virtuelle sur laquelle exécuter le job. "ubuntu-latest" est un bon choix par défaut.
    runs-on: ubuntu-latest

    # Séquence d'étapes à exécuter pour ce job
    steps:
      # Étape 1 : Récupérer le code du dépôt
      # Utilise une "action" pré-faite par GitHub
      - name: Checkout repository
        uses: actions/checkout@v3

      # Étape 2 : Configurer l'environnement Java (JDK)
      # Utilise une "action" pré-faite pour installer la version de Java que vous voulez
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17' # Mettez la version de Java de votre projet (ex: 11, 17)
          distribution: 'temurin' # Une distribution populaire et open-source de Java
          cache: 'maven' # Met en cache les dépendances Maven pour accélérer les builds futurs

      # NOUVELLE ÉTAPE 3 : Installer les dépendances JAR locales
      # Cette étape est cruciale pour que Maven trouve les librairies gpsUtil, etc.
      - name: Install local JAR dependencies
        run: |
          mvn install:install-file -Dfile="TourGuide/libs/gpsUtil.jar" -DgroupId=gpsUtil -DartifactId=gpsUtil -Dversion="1.0.0" -Dpackaging=jar 
          mvn install:install-file -Dfile="TourGuide/libs/RewardCentral.jar" -DgroupId=rewardCentral -DartifactId=rewardCentral -Dversion="1.0.0" -Dpackaging=jar
          mvn install:install-file -Dfile="TourGuide/libs/TripPricer.jar" -DgroupId=tripPricer -DartifactId=tripPricer -Dversion="1.0.0" -Dpackaging=jar
    

    # Étape 4 : Compilation
      # Exécute une commande Maven pour compiler le code
      - name: Compile
        run: mvn -B compile --file pom.xml

      # Étape 5 : Tests
      # Exécute les tests. Grâce à notre pom.xml, les tests de performance sont exclus.
      - name: Run tests
        run: mvn -B test --file pom.xml

      # Étape 6 : Packaging (création de l'artefact)
      # Exécute la commande package qui compile, teste (s'ils n'ont pas déjà été faits) et crée le .jar
      - name: Package application
        run: mvn -B package --file pom.xml

      # Étape 7 (Optionnelle mais recommandée) : Uploader l'artefact
      # Permet de télécharger le .jar directement depuis la page du workflow sur GitHub
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tourguide-app # Nom de l'artefact
          path: target/*.jar  # Chemin vers le fichier à uploader